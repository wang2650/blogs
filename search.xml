<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ndvi计算</title>
    <url>/posts/5/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> Accord.Imaging.Filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NDVI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Load the input image</span></span><br><span class="line">            Bitmap inputImage = <span class="keyword">new</span> Bitmap(<span class="string">&quot;input_image.tif&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Extract the red and near-infrared bands</span></span><br><span class="line">            Bitmap redBand = <span class="keyword">new</span> ExtractChannel(RGB.R).Apply(inputImage);</span><br><span class="line">            Bitmap nirBand = <span class="keyword">new</span> ExtractChannel(RGB.G).Apply(inputImage);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert the images to float format</span></span><br><span class="line">            Bitmap redBandFloat = <span class="keyword">new</span> Grayscale(<span class="number">0.2125</span>, <span class="number">0.7154</span>, <span class="number">0.0721</span>).Apply(redBand);</span><br><span class="line">            Bitmap nirBandFloat = <span class="keyword">new</span> Grayscale(<span class="number">0.2125</span>, <span class="number">0.7154</span>, <span class="number">0.0721</span>).Apply(nirBand);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Calculate the NDVI map</span></span><br><span class="line">            <span class="built_in">float</span>[,] ndviMap = <span class="keyword">new</span> <span class="built_in">float</span>[inputImage.Width, inputImage.Height];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; inputImage.Width; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; inputImage.Height; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">float</span> red = redBandFloat.GetPixel(x, y).GetBrightness();</span><br><span class="line">                    <span class="built_in">float</span> nir = nirBandFloat.GetPixel(x, y).GetBrightness();</span><br><span class="line">                    ndviMap[x, y] = (nir - red) / (nir + red);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Save the NDVI map as a grayscale image</span></span><br><span class="line">            Bitmap ndviImage = <span class="keyword">new</span> Bitmap(inputImage.Width, inputImage.Height);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; inputImage.Width; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; inputImage.Height; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span> ndviValue = (<span class="built_in">byte</span>)(ndviMap[x, y] * <span class="number">255</span>);</span><br><span class="line">                    ndviImage.SetPixel(x, y, Color.FromArgb(ndviValue, ndviValue, ndviValue));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ndviImage.Save(<span class="string">&quot;ndvi_map.tif&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Emgu.CV;</span><br><span class="line">using Emgu.CV.Structure;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">public class ImageAnalyzer</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 计算图片中绿色像素的比例。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;imagePath&quot;&gt;图片的路径。&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;scaleFactor&quot;&gt;缩放因子（小于1表示缩小，等于1表示不缩放）。&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;绿色像素的比例（介于 0.0 和 1.0 之间）。&lt;/returns&gt;</span><br><span class="line">    public static double CalculateGreenPercentage(string imagePath, float scaleFactor = 1.0f)</span><br><span class="line">    &#123;</span><br><span class="line">        // 加载图片</span><br><span class="line">        Image&lt;Bgr, byte&gt; image = new Image&lt;Bgr, byte&gt;(imagePath);</span><br><span class="line"></span><br><span class="line">        // 缩放图片</span><br><span class="line">        if (scaleFactor != 1.0f)</span><br><span class="line">        &#123;</span><br><span class="line">            Size newSize = new Size((int)(image.Width * scaleFactor), (int)(image.Height * scaleFactor));</span><br><span class="line">            image = image.Resize(newSize, Inter.Linear);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 转换到 HSV 颜色空间</span><br><span class="line">        Image&lt;Hsv, byte&gt; hsvImage = image.Convert&lt;Hsv, byte&gt;();</span><br><span class="line"></span><br><span class="line">        // 定义绿色范围</span><br><span class="line">        Hsv lowerGreen = new Hsv(40, 40, 40); // 绿色的下限</span><br><span class="line">        Hsv upperGreen = new Hsv(80, 255, 255); // 绿色的上限</span><br><span class="line"></span><br><span class="line">        // 创建掩码</span><br><span class="line">        Image&lt;Gray, byte&gt; mask = hsvImage.InRange(lowerGreen, upperGreen);</span><br><span class="line"></span><br><span class="line">        // 计算绿色像素的数量</span><br><span class="line">        int greenPixelCount = mask.CountNonzero();</span><br><span class="line"></span><br><span class="line">        // 总像素数量</span><br><span class="line">        int totalPixelCount = image.Width * image.Height;</span><br><span class="line"></span><br><span class="line">        // 计算绿色像素的比例</span><br><span class="line">        double greenPercentage = (double)greenPixelCount / totalPixelCount;</span><br><span class="line"></span><br><span class="line">        return greenPercentage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用示例</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        string imagePath = @&quot;C:\path\to\your\image.jpg&quot;;</span><br><span class="line">        double greenPercentage = ImageAnalyzer.CalculateGreenPercentage(imagePath, scaleFactor: 0.5);</span><br><span class="line">        Console.WriteLine($&quot;Green percentage: &#123;greenPercentage:P2&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>hexo教程</title>
    <url>/posts/6/</url>
    <content><![CDATA[<p>git的清理<br>执行 git rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）</p>
<p>这时删除文件已经进入本地缓存区，<br>git add .<br>git commit -m “update”<br>git push origin branchName</p>
<p>或者直接 git push</p>
<p>hexo的插件<br>文章教程</p>
<p>yarn add hexo-deployer-git<br>yarn add hexo-abbrlink 断链使用<br>yarn add hexo-spoiler 模糊使用<br>糊里糊涂</p>
<p>yarn add markdown-it-ruby 上方注释使用yarn add hexo-renderer-marked 文档<br>yarn add hexo-generator-sitemap 文档<br>yarn add hexo-lazyload-image 文档<br>yarn add hexo-generator-searchdb 文档<br>yarn add hexo-filter-nofollow<br>yarn add hexo-submit-urls-to-search-engine 文档<br>yarn add hexo-blog-encrypt 文档<br>yarn add hexo-tag-qrcode 文档<br>yarn add hexo-neat 文档</p>
<p>yarn add imagemin-jpegtran imagemin-svgo imagemin-gifsicle imagemin-optipng –dev</p>
<p>tips<br>相对路径引用的标签插件<br>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>
<p>{ % asset_path slug % }<br>{ % asset_img slug [title] % }<br>{ % asset_link slug [title] % }</p>
<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <img src="/example.jpg" alt="img"> ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）<br>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>
<p>{ % asset_img example.jpg This is an example image % }</p>
<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>多媒体</title>
    <url>/posts/7/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=8376695998&auto=1&height=430"></iframe>]]></content>
  </entry>
</search>
